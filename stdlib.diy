;; Some logical operators.

(define not
    (lambda (b)
        (if b #f #t)))

(define or
    (lambda (a b)
        (if a #t (if b #t #f))
    )
)

(define and
    (lambda (a b)
        (if a (if b #t #f) #f)
    )
)

(define xor
    (lambda (a b)
        (
            if (or (and a (not b)) (and (not a) b)) #t #f
        )
    )
)

(define sum
    (lambda (_list)
        (
            if (not (empty _list)) 
                (+ (head _list) (sum (tail _list)))
                0
        )
    )
)


(define length
    (lambda (_list)
        (
            if (empty _list)
            0
            (if (
                and (not (empty '(head _list)))
                    (empty (tail _list)))
                1
                (+ 1 (length (tail _list)))
            )
        )
    )
)

(define last_elem
    (lambda (_list)
        (
            if (eq (length _list) 1)
                (head _list)
                (last_elem (tail _list))
        )
    )
)

(define first
    (lambda (_list elem_count)
        (
            if (not (or (empty _list) (<= elem_count 0) ))
                (cons (head _list) (first (tail _list) (- elem_count 1)))
                '()
        )
    )
)

(define append
    (lambda (_list1 _list2)
        (
            if (empty _list1)
                _list2
                (append (first _list1 (- (length _list1) 1)) (cons (last_elem _list1) _list2))
        )
    )
)
